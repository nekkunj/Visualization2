# -*- coding: utf-8 -*-
"""Home.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p7LcBUkfRHLD_j-UoaPHRLsVok4cp-Nv
"""



# pages/01_Home.py
import streamlit as st
import pandas as pd

# It's good practice to cache data loading for performance in Streamlit apps,
# especially if the data doesn't change frequently.
@st.cache_data
def load_data():
    """
    Loads and preprocesses the accident data.
    Using st.cache_data ensures the data is loaded only once,
    improving app performance.
    """
    try:
        df = pd.read_csv('assets/data_fusionnee.csv')
        df['MS_ACCDN'] = df['MS_ACCDN'].astype(int)
        df['Gravité'] = df['GRAVITE'].apply(lambda x: 'Grave' if x == 'Mortel ou grave' else 'Autre')
        return df
    except FileNotFoundError:
        st.error("Error: 'assets/data_fusionnee.csv' not found. Please ensure the file is in the 'assets' directory.")
        st.stop() # Stop the app execution if data isn't found
    except Exception as e:
        st.error(f"An error occurred while loading data: {e}")
        st.stop()

df = load_data()

def get_kpis(data):
    """
    Calculates key performance indicators (KPIs) from the accident data.
    """
    total_accidents = len(data)
    severe_accidents = len(data[data['Gravité'] == 'Grave'])

    surface_mode_code = data['CD_ETAT_SURFC'].mode()
    if not surface_mode_code.empty:
        surface_code = surface_mode_code.iloc[0]
        surface_labels = {
            11: "Sec", 12: "Mouillé", 13: "Aquaplanage", 14: "Sable/Gravier",
            15: "Neige fondante", 16: "Neige", 17: "Neige durcie",
            18: "Glacé", 19: "Boueux", 99: "Autre"
        }
        surface_label = surface_labels.get(surface_code, "Inconnu")
    else:
        surface_label = "Inconnu"

    return total_accidents, severe_accidents, surface_label

# Calculate KPIs once when the script runs
total_acc, severe_acc, common_surface = get_kpis(df)

# --- Streamlit App Layout ---

# Center the title
st.markdown("<h1 style='text-align: center;'>Quebec Road Accidents Dashboard</h1>", unsafe_allow_html=True)

# Center the introductory text
st.markdown(
    """
    <div style='text-align: center;'>
    This dashboard presents various visualizations of road accidents in Quebec
    based on data related to severity, user types, weather, road surface conditions,
    lighting, and time patterns.
    </div>
    """,
    unsafe_allow_html=True
)

st.markdown("---") # Add a horizontal line for visual separation

st.header("Key Statistics")

# Using st.markdown with custom HTML/CSS for flexbox layout and styling
st.markdown(
    f"""
    <style>
    .kpi-container {{
        display: flex;
        justify-content: space-around;
        gap: 30px;
        margin-top: 20px;
    }}
    .kpi-box {{
        flex: 1;
        padding: 20px;
        border-radius: 10px;
        box-shadow:0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        color: black;
        text-align: center;
        font-size: 1.2em;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 120px; /* Ensure boxes have a consistent height */
    }}
    .kpi-box h3 {{
        color: black;
        margin-bottom: 5px;
        font-size: 1.1em;
    }}
    .kpi-box p {{
        font-size: 1.8em;
        font-weight: bold;
        margin: 0;
    }}
    </style>
    <div class="kpi-container" >
        <div class="kpi-box" > <h3 style="color: #4CAF50;">Total Accidents</h3>
            <p >{total_acc:,}</p>
        </div>
        <div class="kpi-box" > <h3 style="color: #f44336;">Severe Accidents</h3>
            <p>{severe_acc:,}</p>
        </div>
        <div class="kpi-box" > <h3 style="color: #2196F3;">Most Common Surface</h3>
            <p>{common_surface}</p>
        </div>
    </div>
    """,
    unsafe_allow_html=True
)


st.markdown("---")