# -*- coding: utf-8 -*-
"""Road_Severity.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p7LcBUkfRHLD_j-UoaPHRLsVok4cp-Nv
"""



# pages/05_Road_Severity.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px # Often useful for simple charts or color scales

# --- Data Loading and Cleaning (Cached for Performance) ---

@st.cache_data
def load_and_clean_data():
    """
    Loads and cleans the accident data for the Road Severity page.
    This function is cached for performance.
    """
    try:
        df = pd.read_csv('assets/data_fusionnee.csv')
        df.columns = df.columns.str.strip().str.replace('"', '').str.replace('\t', '')

        # Map GRAVITE to desired labels for consistency across app
        df['GRAVITE'] = df['GRAVITE'].replace({
            'Dommages matériels seulement': 'Matériels',
            'Dommages matériels inférieurs au seuil de rapportage': 'Mineurs',
            'Léger': 'Léger',
            'Mortel ou grave': 'Grave'
        })

        return df
    except FileNotFoundError:
        st.error("Error: 'assets/data_fusionnee.csv' not found. Please ensure the file is in the 'assets' directory.")
        st.stop()
    except Exception as e:
        st.error(f"An error occurred while loading data: {e}")
        st.stop()

df = load_and_clean_data()

# --- Helper Function for Sankey Chart Generation ---

def create_sankey_chart(data_frame, chart_type='Road Category'):
    """
    Creates a Sankey diagram to visualize accident flows from
    road categories/configurations to severity.
    chart_type: 'Road Category' or 'Road Configuration'
    """
    # Ensure all relevant columns are clean and consistent
    data_frame['CD_CATEG_ROUTE'] = data_frame['CD_CATEG_ROUTE'].astype(str).str.strip()
    data_frame['CD_CONFG_ROUTE'] = data_frame['CD_CONFG_ROUTE'].astype(str).str.strip()
    data_frame['GRAVITE'] = data_frame['GRAVITE'].astype(str).str.strip()

    # Get unique labels for nodes
    road_categories = sorted(data_frame['CD_CATEG_ROUTE'].unique().tolist())
    road_configs = sorted(data_frame['CD_CONFG_ROUTE'].unique().tolist())
    severities = sorted(data_frame['GRAVITE'].unique().tolist())

    # Define a consistent order for severity (important for visual consistency)
    severity_order = ['Grave', 'Léger', 'Matériels', 'Mineurs']
    severities = [s for s in severity_order if s in severities] # Filter to only present severities

    # Create nodes list based on selected chart type
    if chart_type == 'Road Category':
        nodes = road_categories + severities
    else: # chart_type == 'Road Configuration'
        nodes = road_configs + severities

    # Map label to index for Sankey nodes
    label_to_index = {label: i for i, label in enumerate(nodes)}

    source = []
    target = []
    value = []

    if chart_type == 'Road Category':
        # Aggregate flows: from road category to severity
        flows_data = data_frame.groupby(['CD_CATEG_ROUTE', 'GRAVITE']).size().reset_index(name='count')
        for _, row in flows_data.iterrows():
            if row['CD_CATEG_ROUTE'] in label_to_index and row['GRAVITE'] in label_to_index:
                source.append(label_to_index[row['CD_CATEG_ROUTE']])
                target.append(label_to_index[row['GRAVITE']])
                value.append(row['count'])
    else: # chart_type == 'Road Configuration'
        # Aggregate flows: from road config to severity
        flows_data = data_frame.groupby(['CD_CONFG_ROUTE', 'GRAVITE']).size().reset_index(name='count')
        for _, row in flows_data.iterrows():
            if row['CD_CONFG_ROUTE'] in label_to_index and row['GRAVITE'] in label_to_index:
                source.append(label_to_index[row['CD_CONFG_ROUTE']])
                target.append(label_to_index[row['GRAVITE']])
                value.append(row['count'])

    # Create Sankey diagram figure
    fig_sankey = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=20,
            line=dict(color="black", width=0.5),
            label=nodes,
            # Use a color scale for nodes based on type if desired, or set static colors
            # E.g., colors = ['blue']*len(road_categories) + ['red']*len(severities)
            color="lightgray"
        ),
        link=dict(
            source=source,
            target=target,
            value=value,
            # You can also set link colors based on target/source here
            # color=link_colors # Example: [px.colors.sequential.Plasma[v_idx % len(px.colors.sequential.Plasma)] for v_idx in value]
        )
    )])

    title_text = f"Accident Severity: {chart_type} → Severity"
    fig_sankey.update_layout(
        title_text=title_text,
        font_size=10,
        height=600,
        width=800, # Adjust width as needed for better visibility
        template="plotly_white"
    )

    return fig_sankey

# --- Streamlit Layout ---

st.title("Road Accident Severity Analysis")

st.write(
    """
    This page visualizes the flow of road accidents from different road characteristics
    to their resulting severity. Use the selection below to switch between
    **Road Category** and **Road Configuration** as the starting point of the flow.
    """
)

st.markdown("---")

# Streamlit radio button to select chart type
chart_selection = st.radio(
    "Select the type of flow to visualize:",
    ('Road Category', 'Road Configuration'),
    key='sankey_chart_type_selector'
)

# Generate and display the Sankey chart based on selection
sankey_fig = create_sankey_chart(df, chart_selection)
st.plotly_chart(sankey_fig, use_container_width=True)