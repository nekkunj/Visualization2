# -*- coding: utf-8 -*-
"""Temporal_Spatial.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p7LcBUkfRHLD_j-UoaPHRLsVok4cp-Nv
"""

# pages/04_Temporal_Spatial.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np # For numerical operations, if needed

# --- Data Loading and Preprocessing (Cached for Performance) ---

@st.cache_data
def prep_data():
    """
    Loads and preprocesses the accident data.
    This function is cached to prevent re-loading data on every rerun.
    """
    try:
        df = pd.read_csv('assets/data_fusionnee.csv')

        # Clean column names as done in other files (if not already done globally)
        df.columns = df.columns.str.strip().str.replace('"', '')
        df = df.rename(columns=lambda x: x.strip())

        # Ensure 'AN' (Year) is integer
        df['AN'] = df['AN'].astype(int)

        # Convert 'DT_ACCDN' to datetime and extract time components
        df['DT_ACCDN'] = pd.to_datetime(df['DT_ACCDN'], errors='coerce')
        df['month'] = df['DT_ACCDN'].dt.month
        df['dayofweek'] = df['DT_ACCDN'].dt.dayofweek
        df['hour'] = df['DT_ACCDN'].dt.hour

        # Map day of week to day type
        df['JR_SEMN_ACCDN'] = df['dayofweek'].apply(lambda x: 'Weekday' if x < 5 else 'Weekend')

        # Define quarter of day
        def get_quarter_day(hour):
            if 0 <= hour < 6: return 'Night (0-5h)'
            elif 6 <= hour < 12: return 'Morning (6-11h)'
            elif 12 <= hour < 18: return 'Afternoon (12-17h)'
            else: return 'Evening (18-23h)'
        df['quarter_day'] = df['hour'].apply(get_quarter_day)

        # Map GRAVITE to desired labels
        df['GRAVITE'] = df['GRAVITE'].replace({
            'Dommages matériels seulement': 'Matériels',
            'Dommages matériels inférieurs au seuil de rapportage': 'Mineurs',
            'Léger': 'Léger',
            'Mortel ou grave': 'Grave'
        })

        # Add region coordinates for mapping
        region_coords = {
            'Bas-Saint-Laurent (01)': (48.5, -68.5),
            'Saguenay/-Lac-Saint-Jean (02)': (48.4, -71.1),
            'Capitale-Nationale (03)': (47.0, -71.2),
            'Mauricie (04)': (46.5, -72.7),
            'Estrie (05)': (45.4, -71.9),
            'Montréal (06)': (45.5, -73.6),
            'Outaouais (07)': (45.6, -76.0),
            'Abitibi-Témiscamingue (08)': (48.1, -78.0),
            'Côte-Nord (09)': (50.0, -63.0),
            'Nord-du-Québec (10)': (52.0, -75.0),
            'Gaspésie/-Îles-de-la-Madeleine (11)': (49.1, -65.4),
            'Chaudière-Appalaches (12)': (46.5, -70.5),
            'Laval (13)': (45.6, -73.8),
            'Lanaudière (14)': (46.0, -73.4),
            'Laurentides (15)': (46.5, -74.2),
            'Montérégie (16)': (45.3, -73.0),
            'Centre-du-Québec (17)': (46.0, -72.0)
        }
        df['Region_Full'] = df['REG_ADM'].str.strip() # Keep full name for display
        df['Region'] = df['Region_Full'].str.replace(r'\s*\(\d+\)', '', regex=True).str.upper()

        df['lat'] = df['Region_Full'].map(lambda x: region_coords.get(x, (None, None))[0] if pd.notna(x) else None)
        df['lon'] = df['Region_Full'].map(lambda x: region_coords.get(x, (None, None))[1] if pd.notna(x) else None)

        return df
    except FileNotFoundError:
        st.error("Error: 'assets/data_fusionnee.csv' not found. Please ensure the file is in the 'assets' directory.")
        st.stop()
    except Exception as e:
        st.error(f"An error occurred while loading data: {e}")
        st.stop()

df = prep_data()

# --- Helper Functions for Plotting (replacing map_chart, bar_chart, bar_chart_region) ---

def prepare_region_data(data_frame):
    """Aggregates accident counts per region for the map."""
    region_counts = data_frame.groupby('Region').size().reset_index(name='Accident Count')
    # Merge back with original df to get lat/lon for each region
    # Ensure region_counts has lat/lon columns, taking the first valid coordinate for each region
    region_coords_df = data_frame[['Region', 'lat', 'lon']].drop_duplicates(subset=['Region']).dropna(subset=['lat', 'lon'])
    merged_df = pd.merge(region_counts, region_coords_df, on='Region', how='left')
    return merged_df

def draw_geo_map(data_frame, center_lat, center_lon, zoom):
    """Draws a choropleth-like map of Quebec regions based on accident counts."""
    # Ensure all regions in data_frame have valid lat/lon
    data_frame_filtered = data_frame.dropna(subset=['lat', 'lon'])

    if data_frame_filtered.empty:
        fig = go.Figure()
        fig.update_layout(title="No map data to display.", xaxis={"visible": False}, yaxis={"visible": False})
        return fig

    fig = px.scatter_mapbox(
        data_frame_filtered,
        lat='lat',
        lon='lon',
        color='Accident Count', # Color by the aggregated count
        size='Accident Count',  # Size by the aggregated count
        hover_name='Region',
        hover_data={'Accident Count': True, 'lat': False, 'lon': False},
        color_continuous_scale=px.colors.sequential.Plasma,
        zoom=zoom,
        center={"lat": center_lat, "lon": center_lon},
        height=600,
        title="Accidents by Region"
    )
    fig.update_layout(
        mapbox_style="open-street-map",
        margin={"r":0,"t":30,"l":0,"b":0}
    )
    return fig

def create_bar_chart(data_frame, title, type_col, granularity_col):
    """Creates a grouped bar chart by granularity and severity."""
    if data_frame.empty:
        fig = go.Figure()
        fig.update_layout(title=f"No data for {title}", xaxis={"visible": False}, yaxis={"visible": False})
        return fig

    # Group by granularity and severity
    grouped_df = data_frame.groupby([granularity_col, type_col]).size().reset_index(name='Count')

    # Define a consistent order for severity
    severity_order = ['Grave', 'Léger', 'Matériels', 'Mineurs']
    grouped_df[type_col] = pd.Categorical(grouped_df[type_col], categories=severity_order, ordered=True)
    grouped_df = grouped_df.sort_values(type_col)

    # Order for granularity columns if applicable
    if granularity_col == 'month':
        order_dict = {
            'month': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        }
    elif granularity_col == 'quarter_day':
        order_dict = {
            'quarter_day': ['Night (0-5h)', 'Morning (6-11h)', 'Afternoon (12-17h)', 'Evening (18-23h)']
        }
    elif granularity_col == 'JR_SEMN_ACCDN': # Corresponds to 'daytype'
        order_dict = {
            'JR_SEMN_ACCDN': ['Weekday', 'Weekend']
        }
    else:
        order_dict = None

    fig = px.bar(
        grouped_df,
        x=granularity_col,
        y='Count',
        color=type_col,
        title=title,
        barmode='group',
        labels={'Count': 'Number of Accidents'},
        category_orders=order_dict,
        color_discrete_map={
            'Grave': 'red',
            'Léger': 'orange',
            'Matériels': 'blue',
            'Mineurs': 'green'
        }
    )
    return fig

# --- Session State Initialization ---
if 'selected_region' not in st.session_state:
    st.session_state['selected_region'] = None

# --- Main Streamlit App Layout ---

st.title("Spatio-Temporal Analysis: Quebec Road Safety")

st.write(
    """
    This interactive dashboard visualizes the spatio-temporal distribution of road accidents in Quebec.
    Click on a region on the map to explore accident trends over time by severity for that specific region.
    Use the time granularity selectors to zoom from annual to daily patterns.
    The goal is to help identify high-risk zones and better understand accident dynamics.
    """
)

st.markdown("---")

# Layout using st.columns
col_map, col_region_chart = st.columns([2, 1])

with col_map:
    st.subheader("Accidents by Region (Click on a region)")

    # Prepare data for the map
    df_map_data = prepare_region_data(df)
    fig_map = draw_geo_map(df_map_data, center_lat=47.5, center_lon=-71.5, zoom=4.5)

    # Display map and capture click events
    # We use a unique key for the chart and capture selection
    map_chart_selection = st.plotly_chart(
        fig_map,
        use_container_width=True,
        on_select="streamlit", # Enable selection events
        key='accident-map'
    )

    # Process map click/selection data
    if map_chart_selection and map_chart_selection['selection'] and map_chart_selection['selection']['points']:
        # Extract the region name from the clicked point's customdata (assuming it's the first element)
        clicked_region_data = map_chart_selection['selection']['points'][0]['customdata']
        # The region name from `prepare_region_data` is the 'Region' column, which is the hover_name.
        # It's better to get it from the `point` itself if `hover_name` is set.
        clicked_region_name = map_chart_selection['selection']['points'][0]['hovertext']
        st.session_state['selected_region'] = clicked_region_name
    elif map_chart_selection and not map_chart_selection['selection']:
        # If selection is cleared (e.g., clicking off points), reset selected region
        st.session_state['selected_region'] = None

with col_region_chart:
    st.subheader("Accidents in Selected Region")

    # Time Granularity for Region Chart
    granularity_region_selector = st.selectbox(
        "Select Time Granularity (Region):",
        options=[
            {'label': 'Year', 'value': 'AN'}, # Changed to 'AN' to match column name
            {'label': 'Month', 'value': 'month'},
            {'label': 'Day Type (Weekday/Weekend)', 'value': 'JR_SEMN_ACCDN'}, # Changed to match column name
            {'label': 'Quarter of Day', 'value': 'quarter_day'}
        ],
        format_func=lambda x: x['label'], # Display label, use value internally
        index=0,
        key='granularity-region-selector'
    )
    # Extract the actual column name from the dictionary
    granularity_region_col = granularity_region_selector['value']

    if st.session_state['selected_region']:
        st.info(f"Showing data for: **{st.session_state['selected_region']}**")
        filtered_df_region = df[df['Region'] == st.session_state['selected_region']].copy()
        fig_region_bar = create_bar_chart(
            filtered_df_region,
            f"Accidents in {st.session_state['selected_region']}",
            'GRAVITE',
            granularity_region_col
        )
        st.plotly_chart(fig_region_bar, use_container_width=True)
    else:
        st.markdown(
            """
            <div style="padding: 10px; background-color: #ffffff; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.05); height: 500px; display: flex; align-items: center; justify-content: center; text-align: center;">
                <p style="font-size: 14px; color: #555;">Click on a region on the map to see its accident trends over time.</p>
            </div>
            """,
            unsafe_allow_html=True
        )


st.markdown("---")

st.subheader("Accidents by Time and Severity (Global)")

# Time Granularity for Global Chart
granularity_global_selector = st.selectbox(
    "Select Time Granularity (Global):",
    options=[
        {'label': 'Year', 'value': 'AN'},
        {'label': 'Month', 'value': 'month'},
        {'label': 'Day Type (Weekday/Weekend)', 'value': 'JR_SEMN_ACCDN'},
        {'label': 'Quarter of Day', 'value': 'quarter_day'}
    ],
    format_func=lambda x: x['label'], # Display label, use value internally
    index=0,
    key='granularity-selector'
)
# Extract the actual column name from the dictionary
granularity_global_col = granularity_global_selector['value']

# Create and display the global bar chart
fig_global_bar = create_bar_chart(
    df, # Use the full dataframe for global view
    f"Accidents by {granularity_global_selector['label']} (Global)",
    'GRAVITE',
    granularity_global_col
)
st.plotly_chart(fig_global_bar, use_container_width=True)