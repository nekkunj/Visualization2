# -*- coding: utf-8 -*-
"""Dashboard.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p7LcBUkfRHLD_j-UoaPHRLsVok4cp-Nv
"""



# pages/02_Dashboard.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objs as go

# --- Data Loading and Preprocessing (Cached for Performance) ---

@st.cache_data
def load_data():
    """
    Loads and preprocesses the accident data for the dashboard.
    This function is cached to prevent re-loading data on every rerun.
    """
    try:
        df = pd.read_csv('assets/data_fusionnee.csv')
        df.columns = df.columns.str.strip().str.replace('"', '')
        df = df.rename(columns=lambda x: x.strip())

        # Prepare 'GRAVITE' column
        df['GRAVITE'] = df['GRAVITE'].replace({
            'Dommages matériels seulement': 'Matériels',
            'Dommages matériels inférieurs au seuil de rapportage': 'Mineurs',
            'Léger': 'Léger',
            'Mortel ou grave': 'Grave'
        })

        # Mappings
        weather_mapping = {11: 'Clear', 12: 'Overcast', 13: 'Fog/Mist', 14: 'Rain/Drizzle', 15: 'Heavy Rain',
                           16: 'Strong Wind', 17: 'Snow/Hail', 18: 'Blowing Snow/Storm',
                           19: 'Freezing Rain', 99: 'Other'}
        surface_mapping = {11: 'Dry', 12: 'Wet', 13: 'Aquaplaning', 14: 'Sand/Gravel', 15: 'Slush/Snow',
                           16: 'Snow-covered', 17: 'Hard-packed Snow', 18: 'Icy', 19: 'Muddy', 20: 'Oily', 99: 'Other'}
        lighting_mapping = {1: 'Daylight - Clear Visibility', 2: 'Daylight - Low Visibility',
                            3: 'Night - Road Illuminated', 4: 'Night - Not Illuminated'}
        env_mapping = {1: 'School Zone', 2: 'Residential', 3: 'Business / Commercial', 4: 'Industrial',
                       5: 'Rural', 6: 'Forestry', 7: 'Recreational', 9: 'Other', 0: 'Not Specified'}

        df['CD_COND_METEO'] = df['CD_COND_METEO'].map(weather_mapping)
        df['CD_ETAT_SURFC'] = df['CD_ETAT_SURFC'].map(surface_mapping)
        df['Lighting_Label'] = df['CD_ECLRM'].map(lighting_mapping)
        df['Environment_Label'] = df['CD_ENVRN_ACCDN'].map(env_mapping)

        # Region coordinates for map
        region_coords = {
            'Bas-Saint-Laurent (01)': (48.5, -68.5),
            'Saguenay/-Lac-Saint-Jean (02)': (48.4, -71.1),
            'Capitale-Nationale (03)': (47.0, -71.2),
            'Mauricie (04)': (46.5, -72.7),
            'Estrie (05)': (45.4, -71.9),
            'Montréal (06)': (45.5, -73.6),
            'Outaouais (07)': (45.6, -76.0),
            'Abitibi-Témiscamingue (08)': (48.1, -78.0),
            'Côte-Nord (09)': (50.0, -63.0),
            'Nord-du-Québec (10)': (52.0, -75.0),
            'Gaspésie/-Îles-de-la-Madeleine (11)': (49.1, -65.4),
            'Chaudière-Appalaches (12)': (46.5, -70.5),
            'Laval (13)': (45.6, -73.8),
            'Lanaudière (14)': (46.0, -73.4),
            'Laurentides (15)': (46.5, -74.2),
            'Montérégie (16)': (45.3, -73.0),
            'Centre-du-Québec (17)': (46.0, -72.0)
        }
        df['Region'] = df['REG_ADM'].str.strip()
        df['lat'] = df['REG_ADM'].map(lambda x: region_coords.get(x.strip(), (None, None))[0] if pd.notna(x) else None)
        df['lon'] = df['REG_ADM'].map(lambda x: region_coords.get(x.strip(), (None, None))[1] if pd.notna(x) else None)

        return df
    except FileNotFoundError:
        st.error("Error: 'assets/data_fusionnee.csv' not found. Please ensure the file is in the 'assets' directory.")
        st.stop()
    except Exception as e:
        st.error(f"An error occurred while loading data: {e}")
        st.stop()

df = load_data()

# --- Streamlit Layout ---

st.title("Road Accident Dashboard – Quebec")

# Main visualization selection dropdown
# Using st.columns for better alignment as in Dash
col_dropdown, _ = st.columns([1, 4]) # Adjust width as needed for centering

with col_dropdown:
    selected_chart = st.selectbox(
        "Select a visualization type:",
        options=[
            'Weather',
            'Road Surface',
            'Lighting',
            'Environment',
            'Road Defects',
            'Construction Zones',
            'Weather vs Surface Heatmap',
            'Before / After COVID-19'
        ],
        index=0, # Default to 'Weather'
        key='dashboard-dropdown'
    )

# --- Filters ---
st.markdown("---")
st.subheader("Filters")

# Determine disabled state for filters based on selected_chart
disable_all_filters = (selected_chart == 'Before / After COVID-19')
disable_weather_surface = (selected_chart not in ['Weather', 'Weather vs Surface Heatmap'])
disable_environment = (selected_chart != 'Environment')
disable_defects = (selected_chart != 'Road Defects')
disable_construction = (selected_chart != 'Construction Zones')

# Layout for filter dropdowns using columns
filter_cols = st.columns(6)

# Gravite (Severity) filter - always available unless 'covid' selected
with filter_cols[0]:
    gravite_options = ['All'] + sorted(df['GRAVITE'].dropna().unique().tolist())
    gravite_filter = st.selectbox(
        "Severity",
        options=gravite_options,
        index=0,
        disabled=disable_all_filters,
        key='filter-gravite'
    )
    if gravite_filter == 'All':
        gravite_filter = None # Treat 'All' as no filter

# Year slider (always available)
st.markdown("---")
st.subheader("Year Filter")
annee_filter = st.slider(
    "Filter by year",
    min_value=int(df['AN'].min()),
    max_value=int(df['AN'].max()),
    value=int(df['AN'].min()),
    step=1,
    format='%d',
    key='filter-annee'
)

# Apply initial year and severity filter to get dynamic dropdown options
filtered_df_for_options = df[df['AN'] == annee_filter]
if gravite_filter:
    filtered_df_for_options = filtered_df_for_options[filtered_df_for_options['GRAVITE'] == gravite_filter]

# Dynamic filter options
with filter_cols[1]:
    meteo_options = ['All'] + sorted(filtered_df_for_options['CD_COND_METEO'].dropna().unique().tolist())
    meteo_filter = st.selectbox(
        "Weather",
        options=meteo_options,
        index=0,
        disabled=disable_weather_surface,
        key='filter-meteo'
    )
    if meteo_filter == 'All':
        meteo_filter = None

with filter_cols[2]:
    surface_options = ['All'] + sorted(filtered_df_for_options['CD_ETAT_SURFC'].dropna().unique().tolist())
    surface_filter = st.selectbox(
        "Surface",
        options=surface_options,
        index=0,
        disabled=disable_weather_surface,
        key='filter-surface'
    )
    if surface_filter == 'All':
        surface_filter = None

with filter_cols[3]:
    env_options = ['All'] + sorted(filtered_df_for_options['Environment_Label'].dropna().unique().tolist())
    env_filter = st.selectbox(
        "Environment",
        options=env_options,
        index=0,
        disabled=disable_environment,
        key='filter-env'
    )
    if env_filter == 'All':
        env_filter = None

with filter_cols[4]:
    road_options = ['All'] + sorted(filtered_df_for_options['CD_ASPCT_ROUTE'].dropna().unique().tolist())
    road_filter = st.selectbox(
        "Road Defect",
        options=road_options,
        index=0,
        disabled=disable_defects,
        key='filter-road'
    )
    if road_filter == 'All':
        road_filter = None

with filter_cols[5]:
    const_options = ['All'] + sorted(filtered_df_for_options['CD_ZON_TRAVX_ROUTR'].dropna().unique().tolist())
    const_filter = st.selectbox(
        "Construction Zone",
        options=const_options,
        index=0,
        disabled=disable_construction,
        key='filter-const'
    )
    if const_filter == 'All':
        const_filter = None


# --- Main Graph and Map Generation ---

# Apply all filters for the main data used in graphs
if selected_chart == 'Before / After COVID-19':
    dff = df.copy() # Keep all years for COVID analysis
else:
    dff = df[df['AN'] == annee_filter].copy()

if gravite_filter:
    dff = dff[dff['GRAVITE'] == gravite_filter]
if meteo_filter:
    dff = dff[dff['CD_COND_METEO'] == meteo_filter]
if surface_filter:
    dff = dff[dff['CD_ETAT_SURFC'] == surface_filter]
if env_filter:
    dff = dff[dff['Environment_Label'] == env_filter]
if road_filter:
    dff = dff[dff['CD_ASPCT_ROUTE'] == road_filter]
if const_filter:
    dff = dff[dff['CD_ZON_TRAVX_ROUTR'] == const_filter]


# Create main graph based on selection
main_fig = go.Figure()
map_fig = go.Figure()

if selected_chart == 'Weather':
    main_fig = px.histogram(dff, x='CD_COND_METEO', color='GRAVITE',
                            barmode='group',
                            title=f"Accidents by Weather Conditions - {annee_filter}",
                            labels={'CD_COND_METEO': 'Weather Condition', 'count': 'Number of Accidents'})

elif selected_chart == 'Road Surface':
    main_fig = px.histogram(dff, x='CD_ETAT_SURFC', color='GRAVITE',
                            barmode='group',
                            title=f"Accidents by Road Surface - {annee_filter}",
                            labels={'CD_ETAT_SURFC': 'Road Surface Condition', 'count': 'Number of Accidents'})

elif selected_chart == 'Lighting':
    main_fig = px.histogram(dff, x='Lighting_Label', color='GRAVITE',
                            barmode='group',
                            title=f"Accidents by Lighting Conditions - {annee_filter}",
                            labels={'Lighting_Label': 'Lighting Condition', 'count': 'Number of Accidents'})

elif selected_chart == 'Environment':
    main_fig = px.histogram(dff, x='Environment_Label', color='GRAVITE',
                            title=f"Accidents by Environment - {annee_filter}",
                            labels={'Environment_Label': 'Environment Type', 'count': 'Number of Accidents'})

elif selected_chart == 'Road Defects':
    main_fig = px.histogram(dff, x='CD_ASPCT_ROUTE', color='GRAVITE',
                            barmode='group',
                            title=f"Accidents by Road Defects - {annee_filter}",
                            labels={'CD_ASPCT_ROUTE': 'Road Defect Type', 'count': 'Number of Accidents'})

elif selected_chart == 'Construction Zones':
    main_fig = px.histogram(dff, x='CD_ZON_TRAVX_ROUTR', color='GRAVITE',
                            barmode='group',
                            title=f"Accidents in Construction Zones - {annee_filter}",
                            labels={'CD_ZON_TRAVX_ROUTR': 'Construction Zone Presence', 'count': 'Number of Accidents'})

elif selected_chart == 'Weather vs Surface Heatmap':
    # Filter for severe accidents only as per original Dash code
    severe_dff = dff[dff['GRAVITE'] == 'Grave']
    if not severe_dff.empty:
        main_fig = px.density_heatmap(
            severe_dff,
            x='CD_COND_METEO',
            y='CD_ETAT_SURFC',
            title=f"Severe Accidents: Weather vs Road Surface - {annee_filter}",
            labels={'CD_COND_METEO': 'Weather', 'CD_ETAT_SURFC': 'Road Surface'},
            color_continuous_scale='Reds'
        )
    else:
        main_fig = go.Figure()
        main_fig.update_layout(title="No severe accident data for selected filters.", xaxis={"visible": False}, yaxis={"visible": False})

elif selected_chart == 'Before / After COVID-19':
    # No year filter applied to dff if 'covid' selected
    covid_data = dff.groupby('AN').agg(
        Total=('AN', 'size'),
        Severe=('GRAVITE', lambda x: (x == 'Grave').sum())
    ).reset_index()

    main_fig = go.Figure()
    main_fig.add_trace(go.Scatter(
        x=covid_data['AN'],
        y=covid_data['Total'],
        mode='lines+markers',
        name='Total Accidents',
        line=dict(color='blue', width=2)
    ))
    main_fig.add_trace(go.Scatter(
        x=covid_data['AN'],
        y=covid_data['Severe'],
        mode='lines+markers',
        name='Severe Accidents',
        line=dict(color='red', width=2)
    ))

    # Add vertical line for selected year (from slider)
    main_fig.add_vline(
        x=annee_filter,
        line_width=3,
        line_dash="dash",
        line_color="green",
        annotation_text=f"Selected Year: {annee_filter}",
        annotation_position="top right"
    )

    # COVID period shading
    if not covid_data.empty:
        main_fig.add_vrect(
            x0=2020, x1=covid_data['AN'].max(),
            fillcolor="lightgray", opacity=0.2,
            annotation_text="COVID-19 Period",
            annotation_position="top left"
        )

    main_fig.update_layout(
        title="Accident Trends Before/After COVID-19",
        xaxis_title="Year",
        yaxis_title="Number of Accidents",
        hovermode="x unified"
    )

# --- Map Generation ---
# Create map only if there is data and valid coordinates
map_df = dff.copy()
map_df = map_df.dropna(subset=['lat', 'lon']) # Drop rows without coordinates for map

if not map_df.empty:
    map_fig = px.scatter_mapbox(
        map_df,
        lat='lat',
        lon='lon',
        hover_name='Region',
        hover_data=['GRAVITE', 'CD_COND_METEO', 'CD_ETAT_SURFC'],
        color='GRAVITE',
        zoom=5,
        center={"lat": 46.8, "lon": -71.2},  # Center on Quebec City
        height=500,
        title=f"Accidents by Region - {annee_filter}" if selected_chart != 'Before / After COVID-19' else "Accidents by Region (All Years)",
        color_discrete_map={
            'Grave': 'red',
            'Léger': 'orange',
            'Matériels': 'blue',
            'Mineurs': 'green'
        }
    )
    map_fig.update_layout(
        mapbox_style="open-street-map",
        margin={"r":0,"t":30,"l":0,"b":0}
    )
else:
    map_fig = go.Figure()
    map_fig.update_layout(
        title="No map data to display for selected filters",
        xaxis={"visible": False},
        yaxis={"visible": False}
    )

# --- Display Graphs ---
st.markdown("---")
graph_col, map_col = st.columns([2, 1]) # Adjust column ratio as needed

with graph_col:
    st.plotly_chart(main_fig, use_container_width=True)

with map_col:
    st.plotly_chart(map_fig, use_container_width=True)